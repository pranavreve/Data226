# -*- coding: utf-8 -*-
"""alpha_vantage_snowflake_dag.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-ATKURPUS-yDz6aE_bYQFXHEsOYDBSaE
"""

import requests
import snowflake.connector
from datetime import datetime, timedelta
import logging
from airflow.decorators import dag, task
from airflow.utils.dates import days_ago
from airflow.models import Variable
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger()

# DAG definition
@dag(schedule_interval='@daily', start_date=days_ago(1), catchup=False, tags=['alpha_vantage', 'snowflake'])
def alpha_vantage_snowflake_pipeline():
    # Define variables
    vantage_api_key = Variable.get('vantage_api_key')
    snowflake_conn_id = 'snowflake_default'
    symbol = "NVDA"

    @task
    def return_last_90d_price(symbol):
        url = f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={vantage_api_key}'
        r = requests.get(url)
        data = r.json()
        results = []

        # Get the last 90 days of data
        ninety_days_ago = datetime.now() - timedelta(days=90)

        # Iterate through the data and append the date
        for d in data.get("Time Series (Daily)", {}):
            date_obj = datetime.strptime(d, "%Y-%m-%d")
            if date_obj >= ninety_days_ago:
                stock_info = data["Time Series (Daily)"][d]
                stock_info["date"] = d
                stock_info["symbol"] = symbol
                results.append(stock_info)

        logger.info(f"Retrieved {len(results)} days of data for {symbol}")
        return results

    @task
    def load_records(database, schema, table, results):
        hook = SnowflakeHook(snowflake_conn_id=snowflake_conn_id)
        conn = hook.get_conn()
        cursor = conn.cursor()

        try:
            # Start transaction
            logger.info("Starting transaction to load records into Snowflake.")
            cursor.execute("BEGIN;")

            # Create database and schema if they do not exist
            cursor.execute(f"CREATE DATABASE IF NOT EXISTS {database};")
            cursor.execute(f"CREATE SCHEMA IF NOT EXISTS {database}.{schema};")
            logger.info(f"Database {database} and schema {schema} created or already exist.")

            # Create or replace table
            cursor.execute(f"""
                CREATE OR REPLACE TABLE {database}.{schema}.{table} (
                    date DATE PRIMARY KEY,
                    open FLOAT,
                    high FLOAT,
                    low FLOAT,
                    close FLOAT,
                    volume FLOAT,
                    symbol VARCHAR
                );
            """)
            logger.info(f"Table {table} created or replaced in schema {schema}.")

            # Insert records
            for r in results:
                date = r["date"]
                open_price = r["1. open"]
                high = r["2. high"]
                low = r["3. low"]
                close = r["4. close"]
                volume = r["5. volume"]
                symbol = r["symbol"]
                insert_sql = f"""
                    MERGE INTO {database}.{schema}.{table} AS target
                    USING (SELECT '{date}' AS date, {open_price} AS open, {high} AS high, {low} AS low, {close} AS close, {volume} AS volume, '{symbol}' AS symbol) AS source
                    ON target.date = source.date
                    WHEN MATCHED THEN UPDATE SET
                        open = source.open,
                        high = source.high,
                        low = source.low,
                        close = source.close,
                        volume = source.volume,
                        symbol = source.symbol
                    WHEN NOT MATCHED THEN INSERT (date, open, high, low, close, volume, symbol)
                    VALUES (source.date, source.open, source.high, source.low, source.close, source.volume, source.symbol);
                """
                cursor.execute(insert_sql)
            logger.info(f"Data inserted/updated successfully for symbol {symbol}")

            # Commit transaction
            cursor.execute("COMMIT;")
            logger.info("Transaction committed successfully.")
        except Exception as e:
            # Rollback transaction if any error occurs
            cursor.execute("ROLLBACK;")
            logger.error(f"Error occurred: {e}. Transaction rolled back.")
            raise e
        finally:
            # Close connection
            cursor.close()
            conn.close()
            logger.info("Snowflake connection closed.")

    @task
    def check_table_stats(database, schema, table):
        hook = SnowflakeHook(snowflake_conn_id=snowflake_conn_id)
        conn = hook.get_conn()
        cursor = conn.cursor()
        try:
            cursor.execute(f"SELECT COUNT(*) FROM {database}.{schema}.{table}")
            count = cursor.fetchone()[0]
            logger.info(f"Total records in {database}.{schema}.{table}: {count}")
        finally:
            cursor.close()
            conn.close()
            logger.info("Snowflake connection closed.")

    # DAG execution flow
    database_name = "DEV"
    schema_name = "raw_data"
    table_name = "stock_price"

    price_list = return_last_90d_price(symbol)
    load_records(database_name, schema_name, table_name, price_list)
    check_table_stats(database_name, schema_name, table_name)

alpha_vantage_snowflake_dag = alpha_vantage_snowflake_pipeline()